# ********RoostGPT********

# Test generated by RoostGPT for test sampleArtilleryEnv2 using AI Type Open AI and AI Model gpt-4-turbo
# 
# Feature file generated for /listener/productOrderInformationRequiredEvent_post for http method type POST 
# RoostTestHash=ce4c08f30f
# 
# 

# ********RoostGPT********
Feature: Product Order Information Required Event

  Background:
    * def urlBase = karate.properties['nnnn_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['nnnn_AUTH_TOKEN']) }

  Scenario Outline: Testing POST request for Product Order Information Required Event
    Given path '/listener/productOrderInformationRequiredEvent'
    And request
      """
      <requestBody>
      """
    When method post
    Then status <expectedStatus>
    And match response contains
      """
      <expectedResponse>
      """

    Examples:
      | requestBody                                                                                                                                                                                                                              | expectedStatus | expectedResponse                                                    |
      | { "notification": { "order": { "associatedDocument": "VTT001", "correlationOrder": "10", "id": "20230315000001", "issue": { "action": "abrir", "code": "7029", "description": "Pendencia de agendamento", "fieldActivity": true } } } }  |            204 | { "notification": { "order": { "issue": { "action": "abrir" } } } } |
      | { "notification": { "order": { "associatedDocument": "VTT001", "correlationOrder": "10", "id": "20230315000001", "issue": { "action": "abrir", "code": "7030", "description": "Pendencia de agendamento", "fieldActivity": false } } } } |            204 | { "notification": { "order": { "issue": { "action": "abrir" } } } } |

  Scenario: Unauthorized access to Product Order Information Required Event
    Given path '/listener/productOrderInformationRequiredEvent'
    And request
      """
      { "notification": { "order": { "associatedDocument": "VTT001", "correlationOrder": "10", "id": "20230315000001", "issue": { "action": "abrir", "code": "7029", "description": "Pendencia de agendamento", "fieldActivity": true } } }
      """
    And header Authorization = 'InvalidToken'
    When method post
    Then status 401

  Scenario: Server error during Product Order Information Required Event
    Given path '/listener/productOrderInformationRequiredEvent'
    And request
      """
      { "notification": { "order": { "associatedDocument": "VTT001", "correlationOrder": "10", "id": "20230315000001", "issue": { "action": "abrir", "code": "7029", "description": "Pendencia de agendamento", "fieldActivity": true } } }
      """
    And header Authorization = #(karate.properties['nnnn_AUTH_TOKEN'])
    When method post
    Then status 500
