# ********RoostGPT********

# Test generated by RoostGPT for test sampleArtilleryEnv2 using AI Type  and AI Model 
# 
# Feature file generated for /listener/productOrderCreateEvent_post for http method type POST 
# RoostTestHash=5d5b9532f3
# 
# 

# ********RoostGPT********
Feature: Testing Product Order Create Event API

  Background:
    * def urlBase = karate.properties['nnnn_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * configure headers = { Authorization: #(karate.properties['nnnn_AUTH_TOKEN']) }

  Scenario Outline: Testing POST method with valid input payloads for Product Order Create Event
    Given url urlBase
    And path '/listener/productOrderCreateEvent'
    And request
      """
      <requestBody>
      """
    When method post
    Then status <statusCode>
    And match response ==
      """
      <responseBody>
      """

    Examples:
      | requestBody                                                                                                                                                | statusCode | responseBody |
      | { "notification": { "date": "2021-06-05T20:23:29-03:00", "order": { "associatedDocument": "VTT001", "correlationOrder": "10", "id": "20230315000001" } } } |        204 | {}           |
      | { "notification": { "date": "2021-06-05T20:23:29-03:00", "order": { "associatedDocument": "VTT002", "correlationOrder": "20", "id": "20230315000002" } } } |        204 | {}           |

  Scenario Outline: Testing POST method with missing required fields for Product Order Create Event
    Given url urlBase
    And path '/listener/productOrderCreateEvent'
    And request
      """
      <requestBody>
      """
    When method post
    Then status <statusCode>
    And match response ==
      """
      <responseBody>
      """

    Examples:
      | requestBody                                                                                                           | statusCode | responseBody                                     |
      | { "notification": { "date": "2021-06-05T20:23:29-03:00" } }                                                           |        400 | { "error": "Missing required fields for order" } |
      | { "notification": { "order": { "associatedDocument": "VTT001", "correlationOrder": "10", "id": "20230315000001" } } } |        400 | { "error": "Missing date field" }                |

  Scenario: Testing unauthorized access to Product Order Create Event
    Given url urlBase
    And path '/listener/productOrderCreateEvent'
    And request
      """
      { "notification": { "date": "2021-06-05T20:23:29-03:00", "order": { "associatedDocument": "VTT001", "correlationOrder": "10", "id": "20230315000001" } } }
      """
    And header Authorization = 'InvalidToken'
    When method post
    Then status 401
    And match response ==
      """
      { "error": "Unauthorized" }
      """

  Scenario: Testing server error for Product Order Create Event
    Given url urlBase
    And path '/listener/productOrderCreateEvent'
    And request
      """
      { "notification": { "date": "2021-06-05T20:23:29-03:00", "order": { "associatedDocument": "VTT001", "correlationOrder": "10", "id": "20230315000001" } } }
      """
    When method post
    Then status 500
    And match response ==
      """
      { "error": "Server Error" }
      """
