# ********RoostGPT********

# Test generated by RoostGPT for test sampleArtilleryEnv2 using AI Type  and AI Model 
# 
# Feature file generated for /cancelProductOrder/{order.Id}_post for http method type POST 
# RoostTestHash=a5ea3b10ac
# 
# 

# ********RoostGPT********
Feature: Cancel Product Order By Id

  Background:
    * def urlBase = karate.properties['nnnn_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['nnnn_AUTH_TOKEN']) }

  Scenario Outline: Cancel product order with valid and invalid order IDs
    Given path 'cancelProductOrder', '<order_id>'
    And request
      """
      { 
        order: { 
          associatedDocument: '<associated_document>', 
          customer: { 
            subscriberId: '<subscriber_id>' 
          } 
        } 
      }
      """
    When method POST
    Then status <expected_status>
    And match response ==
      """
      <expected_response>
      """

    Examples:
      | order_id         | associated_document | subscriber_id | expected_status | expected_response                                                                                                      |
      | '20230315000001' | 'VTT001'            | 'SVTAL001'    |             200 | { "control": { "code": "200", "message": "OK", "type": "S" } }                                                         |
      | '20230315000002' | 'VTT001'            | 'SVTAL002'    |             404 | { "control": { "code": "404", "message": "Not Found", "type": "E" } }                                                  |
      | '20230315000003' | 'VTT002'            | 'SVTAL001'    |             406 | { "control": { "code": "406", "message": "Not Acceptable (AssociatedDocument j√° existente/utilizado)", "type": "E" } } |

  Scenario: Unauthorized access to cancel product order
    Given path 'cancelProductOrder', '20230315000001'
    And request
      """
      { 
        order: { 
          associatedDocument: 'VTT001', 
          customer: { 
            subscriberId: 'SVTAL001' 
          } 
        } 
      }
      """
    When method POST
    Then status 401
    And match response ==
      """
      { "control": { "code": "401", "message": "Unauthorized", "type": "E" } }
      """

  Scenario: Exceeding request quota
    Given path 'cancelProductOrder', '20230315000001'
    And request
      """
      { 
        order: { 
          associatedDocument: 'VTT001', 
          customer: { 
            subscriberId: 'SVTAL001' 
          } 
        } 
      }
      """
    When method POST
    Then status 429
    And match response ==
      """
      { "control": { "code": "429", "message": "Too Many Requests - Exceeded Quota", "type": "E" } }
      """

  Scenario: Server error when canceling product order
    Given path 'cancelProductOrder', '20230315000001'
    And request
      """
      { 
        order: { 
          associatedDocument: 'VTT001', 
          customer: { 
            subscriberId: 'SVTAL001' 
          } 
        } 
      }
      """
    When method POST
    Then status 500
    And match response ==
      """
      { "control": { "code": "500", "message": "Internal Server Error", "type": "T" } }
      """
