# ********RoostGPT********

# Test generated by RoostGPT for test sampleArtilleryEnv2 using AI Type  and AI Model 
# 
# Feature file generated for /cancelProductOrder/{order.Id}_post for http method type POST 
# RoostTestHash=a5ea3b10ac
# 
# 

# ********RoostGPT********
Feature: Cancel Product Order By Id

  Background:
    * def urlBase = karate.properties['nnnn_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * configure headers = { Authorization: #(karate.properties['nnnn_AUTH_TOKEN']) }
    * url urlBase

  Scenario Outline: Cancel product order with valid order ID and request body
    Given path '/cancelProductOrder/', <order_Id>
    And request
      """
      <request_body>
      """
    When method POST
    Then status 200
    And match response ==
      """
      <expected_response>
      """
    And match response contains { code: '#string', message: '#string', type: '#string' }

    Examples:
      | read('cancelProductOrder_order.Id_post.csv') |

  Scenario Outline: Cancel product order with invalid order ID
    Given path '/cancelProductOrder/', <order_Id>
    And request
      """
      <request_body>
      """
    When method POST
    Then status <status_code>
    And match response ==
      """
      <expected_response>
      """
    And match response contains { code: '#string', message: '#string', type: '#string' }

    Examples:
      | order_Id         | request_body                                                                                | status_code | expected_response                                                                                   |
      | 'invalid0001'    | { "order": { "associatedDocument": "VTT001", "customer": { "subscriberId": "SVTAL001" } } } |         404 | { "control": { "code": "404", "message": "Not Found", "type": "E" } }                               |
      | '20230315000001' | { "order": { "associatedDocument": "VTT001", "customer": { "subscriberId": "SVTAL100" } } } |         406 | { "control": { "code": "406", "message": "Not Acceptable (subscriberId not exist)", "type": "E" } } |

  Scenario: Unauthorized access attempt
    Given path '/cancelProductOrder/20230315000001'
    And request
      """
      { "order": { "associatedDocument": "VTT001", "customer": { "subscriberId": "SVTAL001" } } }
      """
    When method POST
    Then status 401
    And match response ==
      """
      { "control": { "code": "401", "message": "Unauthorized", "type": "E" } }
      """
    And match response contains { code: '#string', message: '#string', type: '#string' }

  Scenario: Exceeding request quota
    Given path '/cancelProductOrder/20230315000001'
    And request
      """
      { "order": { "associatedDocument": "VTT001", "customer": { "subscriberId": "SVTAL001" } } }
      """
    When method POST
    Then status 429
    And match response ==
      """
      { "control": { "code": "429", "message": "Too Many Requests - Exceeded Quota", "type": "E" } }
      """
    And match response contains { code: '#string', message: '#string', type: '#string' }
