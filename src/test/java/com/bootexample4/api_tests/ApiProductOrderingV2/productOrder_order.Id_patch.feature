# ********RoostGPT********

# Test generated by RoostGPT for test sampleArtilleryEnv2 using AI Type  and AI Model 
# 
# Feature file generated for /productOrder/{order.Id}_patch for http method type PATCH 
# RoostTestHash=9e8fcf3d77
# 
# 

# ********RoostGPT********
Feature: Patch Product Order By Id

  Background:
    * def urlBase = karate.properties['nnnn_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['nnnn_AUTH_TOKEN']) }

  Scenario Outline: Update product order with valid order Id and request body
    Given path 'productOrder', '<order_Id>'
    And request <request_body>
    When method patch
    Then status 200
    And match response == <expected_response>

    Examples:
      | read('productOrder_order.Id_patch.csv') |

  Scenario: Attempt to update product order with invalid authorization
    Given path 'productOrder', '20230315000001'
    And request """{ "order": { "appointment": { "date": "2021-06-07T12:47:00", "hasSlot": true, "mandatoryType": "Permitido", "workOrderId": "" }, "associatedDocument": "VTT001", "correlationOrder": "10", "issue": { "action": "fechar", "code": "7016", "observation": "Reagendamento por ausência", "updateDate": "2021-12-09T15:20:00" }}"""
    And header Authorization = 'InvalidToken'
    When method patch
    Then status 401
    And match response == """{ "control": { "code": "401", "message": "Unauthorized", "type": "E" } }"""

  Scenario: Update product order with non-existent order Id
    Given path 'productOrder', 'nonExistentId'
    And request """{ "order": { "appointment": { "date": "2021-06-07T12:47:00", "hasSlot": true, "mandatoryType": "Permitido", "workOrderId": "" }, "associatedDocument": "VTT001", "correlationOrder": "10", "issue": { "action": "fechar", "code": "7016", "observation": "Reagendamento por ausência", "updateDate": "2021-12-09T15:20:00" }}"""
    When method patch
    Then status 404
    And match response == """{ "control": { "code": "404", "message": "Not Found", "type": "E" } }"""
