# ********RoostGPT********

# Test generated by RoostGPT for test sampleArtilleryEnv2 using AI Type Open AI and AI Model gpt-4-turbo
# 
# Feature file generated for /productOrder/{order.Id}_patch for http method type PATCH 
# RoostTestHash=9e8fcf3d77
# 
# 

# ********RoostGPT********
Feature: Patch Product Order By Id

  Background:
    * def urlBase = karate.properties['nnnn_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['nnnn_AUTH_TOKEN']) }

  Scenario Outline: Update product order with valid payload
    Given path 'productOrder', '<order_Id>'
    And request
      """
      <payload>
      """
    When method patch
    Then status 200
    And match response ==
      """
      <expected_response>
      """

    Examples:
      | read('productOrder_order.Id_patch.csv') |

  Scenario: Unauthorized access attempt
    Given path 'productOrder', '20230315000001'
    And request
      """
      { "order": {} }
      """
    When method patch
    Then status 401
    And match response ==
      """
      { "control": { "code": "401", "message": "Unauthorized", "type": "E" } }
      """

  Scenario: Not Found error when order id does not exist
    Given path 'productOrder', '99999999999999'
    And request
      """
      { "order": {} }
      """
    When method patch
    Then status 404
    And match response ==
      """
      { "control": { "code": "404", "message": "Not Found", "type": "E" } }
      """

  Scenario: Bad Request error with invalid input
    Given path 'productOrder', '20230315000001'
    And request
      """
      { "invalidField": "invalidData" }
      """
    When method patch
    Then status 400
    And match response ==
      """
      { "control": { "code": "400", "message": "Bad Request", "type": "E" } }
      """
