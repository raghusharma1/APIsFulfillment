# ********RoostGPT********

# Test generated by RoostGPT for test sampleArtilleryEnv2 using AI Type  and AI Model 
# 
# Feature file generated for /productOrder_post for http method type POST 
# RoostTestHash=98c6afd708
# 
# 

# ********RoostGPT********
Feature: Test the /productOrder API endpoint

  Background:
    * def urlBase = karate.properties['nnnn_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['nnnn_AUTH_TOKEN']) }

  Scenario Outline: Test POST /productOrder with various valid payloads
    Given path '/productOrder'
    And request <payload>
    When method post
    Then status 201
    And match response == <expectedResponse>

    Examples:
      | read('productOrder_post.csv') |

  Scenario: Test GET /productOrder with invalid method
    Given path '/productOrder'
    When method get
    Then status 405

  Scenario: Test DELETE /productOrder with invalid method
    Given path '/productOrder'
    When method delete
    Then status 405

  Scenario Outline: Test POST /productOrder with invalid payloads resulting in 400 Bad Request
    Given path '/productOrder'
    And request <payload>
    When method post
    Then status 400
    And match response == <expectedResponse>

    Examples:
      | payload                                                          | expectedResponse                                                                                                        |
      | read('examples/Invalid_Catalog_ID.json')                         | { "control": { "code": "400", "message": "Campo Catalog ID fora do padrão esperado", "type": "E" } }                    |
      | read('examples/Catalog_ID_with_greater_speed_than_allowed.json') | { "control": { "code": "400", "message": "O campo Catalog ID está com velocidade superior a permitida", "type": "E" } } |
      | read('examples/General_Bad_Request.json')                        | { "control": { "code": "400", "message": "Bad Request", "type": "E" } }                                                 |
      | read('examples/Not_allowed_to_inform_products.json')             | { "control": { "code": "400", "message": "Não é permitido informar produtos para esse tipo de ordem", "type": "E" } }   |

  Scenario Outline: Test POST /productOrder with unauthorized access resulting in 401 Unauthorized
    Given path '/productOrder'
    And request <payload>
    And header Authorization = 'InvalidToken'
    When method post
    Then status 401
    And match response == { "control": { "code": "401", "message": "Unauthorized", "type": "E" } }

    Examples:
      | payload                             |
      | read('examples/Valid_Request.json') |
