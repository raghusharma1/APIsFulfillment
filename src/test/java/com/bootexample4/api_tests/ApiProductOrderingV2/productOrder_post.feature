# ********RoostGPT********

# Test generated by RoostGPT for test sampleArtilleryEnv2 using AI Type  and AI Model 
# 
# Feature file generated for /productOrder_post for http method type POST 
# RoostTestHash=98c6afd708
# 
# 

# ********RoostGPT********
Feature: Request Opening Order API Testing

  Background:
    * def urlBase = karate.properties['nnnn_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['nnnn_AUTH_TOKEN']) }

  Scenario Outline: Test successful creation of an order with different types
    Given path '/productOrder'
    And request
      """
      <requestBody>
      """
    When method post
    Then status 201
    And match response ==
      """
      <expectedResponse>
      """
    And match response.order.id != null

    Examples:
      | read('productOrder_post.csv') |

  Scenario Outline: Test order creation with invalid inputs
    Given path '/productOrder'
    And request
      """
      <requestBody>
      """
    When method post
    Then status <responseStatus>
    And match response ==
      """
      <expectedResponse>
      """

    Examples:
      | requestBody                                                                                                                                                               | responseStatus | expectedResponse                                                        |
      | { "order": { "type": "Instalacao", "infraType": "FTTH", "customer": { "subscriberId": "" }, "appointment": {"hasSlot": true, "mandatoryType": "Obrigatorio" } } }         |            400 | { "control": { "code": "400", "message": "Bad Request", "type": "E" } } |
      | { "order": { "type": "Instalacao", "infraType": "FTTH", "customer": { "subscriberId": "SVTAL003" }, "appointment": {"hasSlot": true, "mandatoryType": "InvalidType" } } } |            400 | { "control": { "code": "400", "message": "Bad Request", "type": "E" } } |

  Scenario: Unauthorized access attempt
    Given path '/productOrder'
    And request
      """
      { "order": { "type": "Instalacao", "infraType": "FTTH", "customer": { "subscriberId": "SVTAL001" }, "appointment": {"hasSlot": true, "mandatoryType": "Obrigatorio" } } }
      """
    And header Authorization = 'InvalidToken'
    When method post
    Then status 401
    And match response ==
      """
      { "control": { "code": "401", "message": "Unauthorized", "type": "E" } }
      """

  Scenario: Test response for not found endpoint
    Given path '/invalidEndpoint'
    When method get
    Then status 404
    And match response ==
      """
      { "control": { "code": "404", "message": "Not Found", "type": "E" } }
      """
