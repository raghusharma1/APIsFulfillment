# ********RoostGPT********

# Test generated by RoostGPT for test sampleArtilleryEnv2 using AI Type  and AI Model 
# 
# Feature file generated for /productOrder_post for http method type POST 
# RoostTestHash=98c6afd708
# 
# 

# ********RoostGPT********
Feature: Test the /productOrder API endpoint

  Background:
    * def urlBase = karate.properties['nnnn_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['nnnn_AUTH_TOKEN']) }

  Scenario Outline: Test POST /productOrder with various valid payloads
    Given path '/productOrder'
    And request <payload>
    When method post
    Then status 201
    And match response == <expectedResponse>
    And match response contains {order: {id: '#string'}}

    Examples:
      | read('productOrder_post.csv') |

  Scenario Outline: Test POST /productOrder with invalid payloads resulting in 400 Bad Request
    Given path '/productOrder'
    And request <payload>
    When method post
    Then status 400
    And match response == <expectedResponse>

    Examples:
      | payload                                                          | expectedResponse                                                                                            |
      | read('examples/invalid_catalog_id.json')                         | {control: {code: '400', message: 'Campo Catalog ID fora do padrão esperado', type: 'E'}}                    |
      | read('examples/catalog_id_with_greater_speed_than_allowed.json') | {control: {code: '400', message: 'O campo Catalog ID está com velocidade superior a permitida', type: 'E'}} |
      | read('examples/general_bad_request.json')                        | {control: {code: '400', message: 'Bad Request', type: 'E'}}                                                 |
      | read('examples/not_allowed_to_inform_products.json')             | {control: {code: '400', message: 'Não é permitido informar produtos para esse tipo de ordem', type: 'E'}}   |

  Scenario: Test Unauthorized access to POST /productOrder
    Given path '/productOrder'
    And request read('examples/valid_request.json')
    And header Authorization = 'InvalidToken'
    When method post
    Then status 401
    And match response == {control: {code: '401', message: 'Unauthorized', type: 'E'}}

  Scenario: Test Too Many Requests to POST /productOrder
    Given path '/productOrder'
    And request read('examples/valid_request.json')
    When method post
    Then status 429
    And match response == {control: {code: '429', message: 'Too Many Requests - Exceeded Quota', type: 'E'}}

  Scenario: Test Internal Server Error on POST /productOrder
    Given path '/productOrder'
    And request read('examples/valid_request.json')
    When method post
    Then status 500
    And match response == {control: {code: '500', message: 'Internal Server Error', type: 'T'}}
