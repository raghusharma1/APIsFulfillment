# ********RoostGPT********

# Test generated by RoostGPT for test sampleArtilleryEnv2 using AI Type  and AI Model 
# 
# Feature file generated for /productOrder_post for http method type POST 
# RoostTestHash=98c6afd708
# 
# 

# ********RoostGPT********
Feature: Request Opening Order API Testing

  Background:
    * def urlBase = karate.properties['nnnn_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['nnnn_AUTH_TOKEN']) }

  Scenario Outline: Test successful creation of order with valid inputs
    Given path '/productOrder'
    And request <payload>
    When method post
    Then status 201
    And match response == <expectedResponse>
    And match response.control.type == 'S'

    Examples:
      | read('productOrder_post.csv') |

  Scenario Outline: Test order creation with invalid inputs leading to 400 Bad Request
    Given path '/productOrder'
    And request <invalidPayload>
    When method post
    Then status 400
    And match response == <expectedBadRequestResponse>

    Examples:
      | invalidPayload                                                   | expectedBadRequestResponse                                                                                                   |
      | read('examples/catalog-id-out-of-standard.json')                 | """{ "control": { "code": "400", "message": "Campo Catalog ID fora do padrão esperado", "type": "E" }}"""                    |
      | read('examples/catalog-id-with-greater-speed-than-allowed.json') | """{ "control": { "code": "400", "message": "O campo Catalog ID está com velocidade superior a permitida", "type": "E" }}""" |

  Scenario: Test unauthorized access with expired or invalid token
    Given path '/productOrder'
    And request read('examples/valid-request.json')
    And header Authorization = 'InvalidToken'
    When method post
    Then status 401
    And match response == """{ "control": { "code": "401", "message": "Unauthorized", "type": "E" }}"""
