# ********RoostGPT********

# Test generated by RoostGPT for test sampleArtilleryEnv2 using AI Type  and AI Model 
# 
# Feature file generated for /productOrder_post for http method type POST 
# RoostTestHash=98c6afd708
# 
# 

# ********RoostGPT********
Feature: Test the /productOrder API endpoint

  Background:
    * def urlBase = karate.properties['nnnn_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['nnnn_AUTH_TOKEN']) }

  Scenario Outline: Test POST /productOrder with various valid payloads
    Given path '/productOrder'
    And request
      """
      <payload>
      """
    When method post
    Then status 201
    And match response ==
      """
      <expectedResponse>
      """

    Examples:
      | read('productOrder_post.csv') |

  Scenario Outline: Test POST /productOrder with invalid payloads
    Given path '/productOrder'
    And request
      """
      <invalidPayload>
      """
    When method post
    Then status <statusCode>
    And match response ==
      """
      <expectedErrorResponse>
      """

    Examples:
      | invalidPayload                                                                | statusCode | expectedErrorResponse                                               |
      | { "order": { "associatedDocument": "VTT001", "type": "IllegalType" } }        |        400 | { "control": { "code": "400", "message": "#string", "type": "E" } } |
      | { "order": { "associatedDocument": "VTT002", "infraType": "UnsupportedType" } |        400 | { "control": { "code": "400", "message": "#string", "type": "E" } } |

  Scenario: Test GET /productOrder unauthorized access
    Given path '/productOrder'
    When method get
    Then status 401

  Scenario: Test DELETE /productOrder not allowed method
    Given path '/productOrder'
    When method delete
    Then status 405
