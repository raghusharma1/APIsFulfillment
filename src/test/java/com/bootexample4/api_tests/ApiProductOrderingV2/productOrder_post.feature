# ********RoostGPT********

# Test generated by RoostGPT for test sampleArtilleryEnv2 using AI Type  and AI Model 
# 
# Feature file generated for /productOrder_post for http method type POST 
# RoostTestHash=98c6afd708
# 
# 

# ********RoostGPT********
Feature: Test /productOrder API for various scenarios

  Background:
    * def urlBase = karate.properties['nnnn_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: '#(karate.properties['nnnn_AUTH_TOKEN'])' }

  Scenario Outline: Test POST /productOrder with valid inputs for <orderType>
    Given path '/productOrder'
    And request <body>
    When method post
    Then status 201
    And match response == <expectedResponse>
    And match response.control.type == 'S'
    And match response.order.id == '#string'

    Examples:
      | read('productOrder_post.csv') |

  Scenario: Test POST /productOrder with invalid Catalog ID
    Given path '/productOrder'
    And request read('examples/invalid-catalog-id.json')
    When method post
    Then status 400
    And match response == read('responses/400-bad-catalog-id.json')

  Scenario: Test POST /productOrder with unauthorized access
    Given path '/productOrder'
    And request read('examples/valid-request.json')
    When method post
    Then status 401
    And match response == read('responses/401-unauthorized.json')

  Scenario: Test POST /productOrder exceeding rate limit
    Given path '/productOrder'
    And request read('examples/valid-request.json')
    When method post
    Then status 429
    And match response == read('responses/429-rate-limit-exceeded.json')

  Scenario: Test POST /productOrder with server error
    Given path '/productOrder'
    And request read('examples/valid-request.json')
    When method post
    Then status 500
    And match response == read('responses/500-server-error.json')
