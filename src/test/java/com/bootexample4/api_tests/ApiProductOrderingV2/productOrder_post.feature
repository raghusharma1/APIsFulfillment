# ********RoostGPT********

# Test generated by RoostGPT for test sampleArtilleryEnv2 using AI Type  and AI Model 
# 
# Feature file generated for /productOrder_post for http method type POST 
# RoostTestHash=98c6afd708
# 
# 

# ********RoostGPT********
Feature: Test the /productOrder API endpoint

  Background:
    * def urlBase = karate.properties['nnnn_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['nnnn_AUTH_TOKEN']) }

  Scenario Outline: Test POST /productOrder with various valid payloads
    Given path '/productOrder'
    And request
      """
      <payload>
      """
    When method post
    Then status 201
    And match response ==
      """
      <expectedResponse>
      """
    And match response.headers['Content-Type'][0] == 'application/json'
    And match response.path == 'productOrder'

    Examples:
      | read('productOrder_post.csv') |

  Scenario Outline: Test POST /productOrder with invalid payloads
    Given path '/productOrder'
    And request
      """
      <payload>
      """
    When method post
    Then status 400
    And match response ==
      """
      <expectedResponse>
      """
    And match response.headers['Content-Type'][0] == 'application/json'
    And match response.path == 'productOrder'

    Examples:
      | payload                                  | expectedResponse                                                                                         |
      | read('examples/invalid-catalog-id.json') | { "code": "400", "message": "Campo Catalog ID fora do padrão esperado", "type": "E" }                    |
      | read('examples/exceeding-speed.json')    | { "code": "400", "message": "O campo Catalog ID está com velocidade superior a permitida", "type": "E" } |
