# ********RoostGPT********

# Test generated by RoostGPT for test sampleArtilleryEnv2 using AI Type  and AI Model 
# 
# Feature file generated for /listener/cancelProductOrderCreateEvent_post for http method type POST 
# RoostTestHash=7601d79448
# 
# 

# ********RoostGPT********
Feature: Cancel Product Order Create Event By Client

  Background:
    * def urlBase = karate.properties['nnnn_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['nnnn_AUTH_TOKEN']) }

  Scenario Outline: Verify successful cancellation of product order creation event
    Given path '/listener/cancelProductOrderCreateEvent'
    And request
      """
      <requestBody>
      """
    When method POST
    Then status 204
    And match responseHeaders['Content-Type'][0] == 'application/json'
    And match response == {}

    Examples:
      | read('listener_cancelProductOrderCreateEvent_post.csv') |

  Scenario Outline: Verify bad request error when mandatory fields are missing in the request
    Given path '/listener/cancelProductOrderCreateEvent'
    And request
      """
      <requestBody>
      """
    When method POST
    Then status 400
    And match responseHeaders['Content-Type'][0] == 'application/json'
    And match response contains { "error": "BadRequest" }

    Examples:
      | requestBody                                                         |
      | { "notification": { "order": { "id": "20230315000001" } } }         |
      | { "notification": { "order": { "associatedDocument": "VTT001" } } } |

  Scenario Outline: Verify unauthorized access with invalid or missing auth token
    Given path '/listener/cancelProductOrderCreateEvent'
    And request
      """
      <requestBody>
      """
    When method POST
    Then status 401
    And match responseHeaders['Content-Type'][0] == 'application/json'
    And match response contains { "error": "Unauthorized" }

    Examples:
      | requestBody                                                                                 |
      | { "notification": { "order": { "associatedDocument": "VTT001", "id": "20230315000001" } } } |

  Scenario Outline: Verify server error handling
    Given path '/listener/cancelProductOrderCreateEvent'
    And request
      """
      <requestBody>
      """
    When method POST
    Then status 500
    And match responseHeaders['Content-Type'][0] == 'application/json'
    And match response contains { "error": "ServerError" }

    Examples:
      | requestBody                                                                                 |
      | { "notification": { "order": { "associatedDocument": "VTT001", "id": "20230315000001" } } } |

  Scenario Outline: Verify service unavailable error handling
    Given path '/listener/cancelProductOrderCreateEvent'
    And request
      """
      <requestBody>
      """
    When method POST
    Then status 503
    And match responseHeaders['Content-Type'][0] == 'application/json'
    And match response contains { "error": "Unavailable" }

    Examples:
      | requestBody                                                                                 |
      | { "notification": { "order": { "associatedDocument": "VTT001", "id": "20230315000001" } } } |

  Scenario Outline: Verify timeout error handling
    Given path '/listener/cancelProductOrderCreateEvent'
    And request
      """
      <requestBody>
      """
    When method POST
    Then status 504
    And match responseHeaders['Content-Type'][0] == 'application/json'
    And match response contains { "error": "Timeout" }

    Examples:
      | requestBody                                                                                 |
      | { "notification": { "order": { "associatedDocument": "VTT001", "id": "20230315000001" } } } |
