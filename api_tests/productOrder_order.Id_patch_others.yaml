# ********RoostGPT********

# Test generated by RoostGPT for test sampleArtilleryEnv2 using AI Type  and AI Model 
# 
# Test generated for /productOrder/{order.Id}_patch for http method type PATCH in artillery framework
# RoostTestHash=9e8fcf3d77
# 
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.nnnn_API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 1
  payload:
    path: "productOrder_order.Id_patch_others.csv"
    fields:
      - "order.Id"
      - "appointment.date"
      - "appointment.hasSlot"
      - "appointment.mandatoryType"
      - "appointment.workOrderId"
      - "issue.action"
      - "issue.code"
      - "issue.observation"
      - "issue.updateDate"
    skipHeader: true
    delimiter: "^|^"
  environments:
    staging:
      target: "https://api.staging.example.com"
    production:
      target: "https://api.example.com"
  plugins:
    expect: {}

scenarios:
  - name: "Test Non-Success API Responses"
    flow:
      - log: "Testing invalid order ID"
      - post:
          url: "/productOrder/invalidId"
          json:
            order:
              appointment:
                date: "{{ appointment.date }}"
                hasSlot: "{{ appointment.hasSlot }}"
                mandatoryType: "{{ appointment.mandatoryType }}"
                workOrderId: "{{ appointment.workOrderId }}"
              issue:
                action: "{{ issue.action }}"
                code: "{{ issue.code }}"
                observation: "{{ issue.observation }}"
                updateDate: "{{ issue.updateDate }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.nnnn_AUTH_TOKEN }}"
          expect:
            - statusCode: 404
      - think: 1
      - log: "Testing with invalid authentication token"
      - patch:
          url: "/productOrder/{{ order.Id }}"
          json:
            order:
              appointment:
                date: "{{ appointment.date }}"
                hasSlot: "{{ appointment.hasSlot }}"
                mandatoryType: "{{ appointment.mandatoryType }}"
                workOrderId: "{{ appointment.workOrderId }}"
              issue:
                action: "{{ issue.action }}"
                code: "{{ issue.code }}"
                observation: "{{ issue.observation }}"
                updateDate: "{{ issue.updateDate }}"
          headers:
            Authorization: "Bearer invalidtoken"
          expect:
            - statusCode: 401
      - think: 1
      - log: "Testing with missing required fields"
      - patch:
          url: "/productOrder/{{ order.Id }}"
          json:
            order:
              appointment:
                date: "{{ appointment.date }}"
                hasSlot: "{{ appointment.hasSlot }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.nnnn_AUTH_TOKEN }}"
          expect:
            - statusCode: 400
      - think: 1
      - log: "Testing with invalid JSON structure"
      - patch:
          url: "/productOrder/{{ order.Id }}"
          body: "not a json string"
          headers:
            Authorization: "Bearer {{ $processEnvironment.nnnn_AUTH_TOKEN }}"
            Content-Type: "application/json"
          expect:
            - statusCode: 400
      - think: 1
