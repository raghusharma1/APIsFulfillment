# ********RoostGPT********

# Test generated by RoostGPT for test sampleArtilleryEnv2 using AI Type  and AI Model 
# 
# Test generated for /productOrder/{order.Id}_patch for http method type PATCH in artillery framework
# RoostTestHash=9e8fcf3d77
# 
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.nnnn_API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 1
  payload:
    path: "productOrder_order.Id_patch_others.csv"
    fields:
      - "order.Id"
      - "associatedDocument"
      - "correlationOrder"
      - "issue.action"
      - "issue.code"
      - "issue.observation"
      - "issue.updateDate"
    skipHeader: true
    delimiter: "^|^"
  environments:
    staging:
      target: "https://staging.example.com"
      headers:
        Authorization: "Bearer {{ $processEnvironment.nnnn_AUTH_TOKEN }}"
  plugins:
    expect: {}

scenarios:
  - name: "Test various non-successful API requests for Patch Product Order"
    flow:
      - log: "Testing with invalid authentication token."
      - patch:
          url: "/productOrder/{{ order.Id }}"
          headers:
            Authorization: "Bearer invalid_token_here"
          json:
            associatedDocument: "{{ associatedDocument }}"
            correlationOrder: "{{ correlationOrder }}"
            issue:
              action: "{{ issue.action }}"
              code: "{{ issue.code }}"
              observation: "{{ issue.observation }}"
              updateDate: "{{ issue.updateDate }}"
          expect:
            - statusCode: 401
      - think: 1

      - log: "Testing with invalid order ID in URL."
      - patch:
          url: "/productOrder/invalid_order_id"
          headers:
            Authorization: "Bearer {{ $processEnvironment.nnnn_AUTH_TOKEN }}"
          json:
            associatedDocument: "{{ associatedDocument }}"
            correlationOrder: "{{ correlationOrder }}"
            issue:
              action: "{{ issue.action }}"
              code: "{{ issue.code }}"
              observation: "{{ issue.observation }}"
              updateDate: "{{ issue.updateDate }}"
          expect:
            - statusCode: 404
      - think: 1

      - log: "Testing with invalid payload structure."
      - patch:
          url: "/productOrder/{{ order.Id }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.nnnn_AUTH_TOKEN }}"
          json:
            associatedDocument: "{{ associatedDocument }}"
            correlationOrder: "{{ correlationOrder }}"
            nonExistingField: "This field does not exist in the schema."
          expect:
            - statusCode: 400
      - think: 1

      - log: "Testing with invalid issue code against allowed values."
      - patch:
          url: "/productOrder/{{ order.Id }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.nnnn_AUTH_TOKEN }}"
          json:
            associatedDocument: "{{ associatedDocument }}"
            correlationOrder: "{{ correlationOrder }}"
            issue:
              action: "{{ issue.action }}"
              code: "9999" # Invalid code
              observation: "{{ issue.observation }}"
              updateDate: "{{ issue.updateDate }}"
          expect:
            - statusCode: 400
      - think: 1
