# ********RoostGPT********

# Test generated by RoostGPT for test sampleArtilleryEnv2 using AI Type  and AI Model 
# 
# Test generated for /productOrder/{order.Id}_patch for http method type PATCH in artillery framework
# RoostTestHash=9e8fcf3d77
# 
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.nnnn_API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 5
  payload:
    path: "productOrder_order.Id_patch_success.csv"
    skipHeader: true
    delimiter: "^|^"
  environments:
    staging:
      target: "https://staging-api.example.com"
    production:
      target: "https://api.example.com"
  plugins:
    expect: {}

scenarios:
  - name: "Patch Product Order By Id Scenario"
    flow:
      - log: "Starting PATCH request to update product order by ID"
      - patch:
          url: "/productOrder/{{ order.Id }}"
          headers:
            Content-Type: "application/json"
            Authorization: "Bearer {{ $processEnvironment.nnnn_AUTH_TOKEN }}"
          json:
            order:
              appointment:
                date: "{{ appointment.date }}"
                hasSlot: true
                mandatoryType: "Permitido"
                workOrderId: "{{ order.workOrderId }}"
              associatedDocument: "VTT001"
              correlationOrder: "10"
              issue:
                action: "fechar"
                code: "7016"
                observation: "Reagendamento por ausência"
                updateDate: "2021-12-09T15:20:00"
          expect:
            - statusCode: 200
            - hasProperty: "control.code"
            - hasProperty: "control.message"
            - equals: 
                path: "control.type"
                value: "S"
      - think: 1
      - log: "Starting another PATCH request with different data"
      - patch:
          url: "/productOrder/{{ order.Id }}"
          headers:
            Content-Type: "application/json"
            Authorization: "Bearer {{ $processEnvironment.nnnn_AUTH_TOKEN }}"
          json:
            order:
              appointment:
                date: "{{ appointment.date }}"
                hasSlot: true
                mandatoryType: "Permitido"
                workOrderId: "{{ order.workOrderId }}"
              associatedDocument: "VTT001"
              correlationOrder: "10"
              issue:
                action: "fechar"
                code: "7029"
                observation: "Resolução de pendência de agendamento"
                updateDate: "2021-12-09T15:20:00"
          expect:
            - statusCode: 200
            - hasProperty: "control.code"
            - hasProperty: "control.message"
            - equals: 
                path: "control.type"
                value: "S"
      - think: 1
